package es.uc3m.moc.etiquetar.user.normaluser.fragments;

import java.util.HashMap;

import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.StateListDrawable;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.widget.ImageView;
import android.widget.TabHost;
import android.widget.TextView;

import es.uc3m.moc.etiquetar.R;
import es.uc3m.moc.etiquetar.user.normaluser.activities.SelectProfileActivity;
import es.uc3m.moc.etiquetar.utilities.constants.Constants;
import es.uc3m.moc.etiquetar.utilities.layout.TabBitmap;

/**
 * FragmentHost.java
 *
 * 30/07/2013
 *
 * Esta clase servirá como "host" para el resto de pantallas principales de la aplicación. Estos fragment estarán implementados por distintas actividades y
 * son los siguientes:
 *
 * 1. CollectionsActivity @see {CollectionsActivity}
 * 2. TagsActivity TODO @see {}
 * 4. MyCommentsActivity TODO @see {}
 * 5. ProfileActivity TODO @see {}
 *
 * La clase actual permitirá mostrar un menú de navegación en la parte inferior que permitirá acceder a cada uno de estos fragmentos de actividades.
 *
 *
 * @author Miguel Olmedo Camacho - 100072925
 * @version 1.0
 */

public class FragmentHost extends  FragmentActivity implements TabHost.OnTabChangeListener {
    private TabHost mTabHost;
    private HashMap mapTabInfo = new HashMap();
    private TabInfo mLastTab = null;

    private class TabInfo {
        private String tag;
        private Class clss;
        private Bundle args;
        private Fragment fragment;
        TabInfo(String tag, Class clazz, Bundle args) {
            this.tag = tag;
            this.clss = clazz;
            this.args = args;
        }

    }

    class TabFactory implements TabHost.TabContentFactory {

        private final Context mContext;

        /**
         * @param context
         */
        public TabFactory(Context context) {
            mContext = context;
        }

        /** (non-Javadoc)
         * @see android.widget.TabHost.TabContentFactory#createTabContent(java.lang.String)
         */
        public View createTabContent(String tag) {
            View v = new View(mContext);
            v.setMinimumWidth(0);
            v.setMinimumHeight(0);
            return v;
        }

    }
    /** (non-Javadoc)
     * @see android.support.v4.app.FragmentActivity#onCreate(android.os.Bundle)
     */
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Step 1: Inflate layout
        setContentView(R.layout.fragment_host);
        // Step 2: Setup TabHost
        initialiseTabHost(savedInstanceState);
        if (savedInstanceState != null) {
            mTabHost.setCurrentTabByTag(savedInstanceState.getString("tab")); //set the tab as per the saved state
        }
    }

    /** (non-Javadoc)
     * @see android.support.v4.app.FragmentActivity#onSaveInstanceState(android.os.Bundle)
     */
    protected void onSaveInstanceState(Bundle outState) {
        outState.putString("tab", mTabHost.getCurrentTabTag()); //save the tab selected
        super.onSaveInstanceState(outState);
    }
    /**
     * Step 2: Setup TabHost
     */
    private void initialiseTabHost(Bundle args) {
        mTabHost = (TabHost)findViewById(R.id.tabhost);
        mTabHost.setup();
        TabInfo tabInfo = null;

        FragmentHost.addTab(this, this.mTabHost, this.mTabHost.newTabSpec(getResources().getString(R.string.menuHome)).setIndicator(getResources().getString(R.string.menuHome)), ( tabInfo = new TabInfo(getResources().getString(R.string.menuHome), NormalUserMainActivity.class, args)), getResources().getString(R.string.menuHome), R.drawable.tab_home);
        this.mapTabInfo.put(tabInfo.tag, tabInfo);
        FragmentHost.addTab(this, this.mTabHost, this.mTabHost.newTabSpec(getResources().getString(R.string.menuTags)).setIndicator(getResources().getString(R.string.menuTags)), ( tabInfo = new TabInfo(getResources().getString(R.string.menuTags), CollectionActivity.class, args)), getResources().getString(R.string.menuTags), R.drawable.tab_collection);
        this.mapTabInfo.put(tabInfo.tag, tabInfo);
        FragmentHost.addTab(this, this.mTabHost, this.mTabHost.newTabSpec(getResources().getString(R.string.menuScan)).setIndicator(getResources().getString(R.string.menuScan)), ( tabInfo = new TabInfo(getResources().getString(R.string.menuScan), null, args)), getResources().getString(R.string.menuScan), R.drawable.scan_qr);
        this.mapTabInfo.put(tabInfo.tag, tabInfo);
        FragmentHost.addTab(this, this.mTabHost, this.mTabHost.newTabSpec(getResources().getString(R.string.menuComments)).setIndicator(getResources().getString(R.string.menuComments)), ( tabInfo = new TabInfo(getResources().getString(R.string.menuComments), CollectionActivity.class, args)), getResources().getString(R.string.menuComments), R.drawable.tab_my_comments);
        this.mapTabInfo.put(tabInfo.tag, tabInfo);
        FragmentHost.addTab(this, this.mTabHost, this.mTabHost.newTabSpec(getResources().getString(R.string.menuProfile)).setIndicator(getResources().getString(R.string.menuProfile)), ( tabInfo = new TabInfo(getResources().getString(R.string.menuProfile), CollectionActivity.class, args)), getResources().getString(R.string.menuProfile), R.drawable.tab_profile);
        this.mapTabInfo.put(tabInfo.tag, tabInfo);
        // Default to first tab
        this.onTabChanged(getResources().getString(R.string.menuHome));
        mTabHost.setOnTabChangedListener(this);
    }
    private Drawable createTabDrawable(int resId) {
        Resources res = getResources();
        StateListDrawable states = new StateListDrawable();

        final BitmapFactory.Options options = new BitmapFactory.Options();
        options.inPreferredConfig = Bitmap.Config.ARGB_8888;

        Bitmap icon = BitmapFactory.decodeResource(res, resId, options);

        Bitmap unselected = TabBitmap.createUnselectedBitmap(res, icon);
        Bitmap selected = TabBitmap.createSelectedBitmap(res, icon);

        icon.recycle();

        states.addState(new int[] { android.R.attr.state_selected }, new BitmapDrawable(res, selected));
        states.addState(new int[] { android.R.attr.state_enabled }, new BitmapDrawable(res, unselected));

        return states;
    }
    /**
     * @param activity
     * @param tabHost
     * @param tabSpec
     */
    private static void addTab(FragmentHost activity, TabHost tabHost, TabHost.TabSpec tabSpec, TabInfo tabInfo, String title, int drawable) {
        LayoutInflater.from(tabHost.getContext()).inflate(R.layout.tab_indicator, null);

        // Attach a Tab view factory to the spec
        tabSpec.setContent(activity.new TabFactory(activity));
        String tag = tabSpec.getTag();
        View view = prepareTabView (tabHost.getContext(), title, drawable);
        tabSpec.setIndicator(view);
        // Check to see if we already have a fragment for this tab, probably
        // from a opreviously saved state.  If so, deactivate it, because our
        // initial state is that a tab isn't shown.
        tabInfo.fragment = activity.getSupportFragmentManager().findFragmentByTag(tag);
        if (tabInfo.fragment != null && !tabInfo.fragment.isDetached()) {
            FragmentTransaction ft = activity.getSupportFragmentManager().beginTransaction();
            ft.detach(tabInfo.fragment);
            ft.commit();
            activity.getSupportFragmentManager().executePendingTransactions();
        }

        tabHost.addTab(tabSpec);
    }

    private static View prepareTabView(Context context, String title, int drawable) {
        View view = LayoutInflater.from(context).inflate(R.layout.tab_indicator, null);
        ((TextView) view.findViewById(R.id.title)).setText(title);
        // TODO poner título o dejarlo sin títutlo mejor??
        ((ImageView) view.findViewById(R.id.icon)).setImageResource(drawable);
        return view;
    }

    /** (non-Javadoc)
     * @see android.widget.TabHost.OnTabChangeListener#onTabChanged(java.lang.String)
     */
    public void onTabChanged(String tag) {
        if(tag.equals(getResources().getString(R.string.menuScan))) {
            Intent intent = new Intent("es.uc3m.moc.etiquetar.qrlecture.SCAN");
            intent.putExtra("SCAN_MODE", "QR_CODE_MODE,PRODUCT_MODE");
            startActivityForResult(intent, 0);
            return;
        }
        TabInfo newTab = (TabInfo) this.mapTabInfo.get(tag);
        if (mLastTab != newTab) {
            FragmentTransaction ft = this.getSupportFragmentManager().beginTransaction();
            if (mLastTab != null) {
                if (mLastTab.fragment != null) {
                    ft.detach(mLastTab.fragment);
                }
            }
            if (newTab != null) {
                if (newTab.fragment == null) {
                    newTab.fragment = Fragment.instantiate(this,
                            newTab.clss.getName(), newTab.args);
                    ft.add(R.id.realtabcontent, newTab.fragment, newTab.tag);
                } else {
                    ft.attach(newTab.fragment);
                }
            }

            mLastTab = newTab;
            ft.commit();
            this.getSupportFragmentManager().executePendingTransactions();
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
        super.onActivityResult(requestCode,resultCode,intent);
        if (requestCode == 0) { // Escaneo QR
            if (resultCode == RESULT_OK) {  // Resultado correcto
                if(intent.getStringExtra(Constants.SCAN_RESULT_EXTRA).equals("QR_CODE")) {
                    // Obtiene la URL resultado del código QR, comprueba si es válida y lanza una nueva actividad para mostrar el contenido
                    String otherText = intent.getStringExtra("SCAN_RESULT");
                    if(isValidURL(otherText)) {
                        Intent selectProfileActivity = new Intent(FragmentHost.this, SelectProfileActivity.class);
                        selectProfileActivity.putExtra(Constants.URL_QR_EXTRA, otherText);
                        startActivity(selectProfileActivity);
                    } else {
                    }

                    Log.d("SCANQR finished", "ScanQR Result: URL = " + otherText);
                } else {
                    Log.d("SCANQR finished", "Not QR Code");
                }

            } else if (resultCode == RESULT_CANCELED) {
            }
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu, menu);
        return super.onCreateOptionsMenu(menu);
    }
    /**
     * Comprueba si la URL pertenece a etiquetAR
     * @param URL la URL a verificar
     * @return true en caso de que pertenezca; false en caso de que no sea una URL válida
     */
    private boolean isValidURL(String URL) {
        if(URL.startsWith(Constants.URL_BASE))
            return true;
        else
            return false;
    }
}
